import json
from logging import exception

import aiofiles
import discord
from colorama import *
from discord import guild
import requests
from discord.ext import commands
from discord.ext.commands import bot
import aiohttp
import PIL
import asyncio

from os import listdir
import time
import PIL
import math
from PIL import Image, ImageFont, ImageDraw, ImageChops
import os
import json
import shutil
import math

import os
import time

import random

intents = discord.Intents.default()
from discord_slash import SlashCommand, SlashContext
from discord_slash.utils.manage_commands import create_choice, create_option

mylist = ["FishBotV2 | Support us with code 'Fevers'!", "FishBotV2 | Use /vote to vote for us", "FishBotV2 | Invite us to your server with /invite", "FishBotV2 | Make sure to support us my telling your friends about our bot!"]

choice = f'{random.choice(mylist)}'

client = commands.Bot(command_prefix='f.', intents=intents)
client.remove_command('help')
slash = SlashCommand(client, sync_commands = True)

fontSize = 40
currentSeasonNum = 19

t = time.localtime()
current_time = time.strftime("%I:%M %p")

# Fortniteapi.io api key
apikey = 'ENTER API KEY'

apiurl = 'https://fortniteapi.io/v1/loot/fish?lang=en'
headers = {'Authorization': apikey}

# Opens settings.json for Icon Generation settings
with open("settings.json") as settings:
    data = json.load(settings)
    
    imageFont = 'BurbankBigCondensed-Black.otf'

    watermark = "Generated by FishBotV2"

    useFeaturedIfAvaliable = 'True'

    iconType = 'standard'

placeholderUrl = 'https://i.ibb.co/svXhCgN/ph.png'

@client.event
async def on_ready():
    print("\nServers: " + str(len(client.guilds)))
    print("Bot is ready")
    print(f"Current time: {current_time}")
    client.loop.create_task(looping_status())

async def looping_status():
    while True:
        await client.change_presence(activity=discord.Game(name=f'on {len(client.guilds)} servers!'))
        await asyncio.sleep(15)
        await client.change_presence(activity=discord.Game(name=f'Invite this bot by using /invite'))
        await asyncio.sleep(20)
        await client.change_presence(activity=discord.Game(name=f'Vote for this bot using /vote'))
        await asyncio.sleep(10)

@slash.slash(name='fishexport', description='Exports all fish names and stats')
async def fishexport(ctx:SlashContext):
    async with aiohttp.ClientSession() as ses:
        print('\nSomeone did the export command lol\n')
        req = await ses.get('https://fortniteapi.io/v1/loot/fish?lang=en', headers=headers)
        fish = (await req.json())["fish"]
        textfile = ""
        for item in fish:
            name = item["name"]
            desc = item['description']
            rarity = item['rarity']
            textfile += f'{name} - {rarity}\n{desc}\n\n'

        textfile += f'Extracted with Fevers Fish Bot'
        await (await aiofiles.open(f'allfish.txt', mode='w+', encoding='utf8')).write(textfile)
        file = discord.File("allfish.txt", filename="allfish.txt")
        await ctx.send('Here is your fish', file=file)


@slash.slash(name='fishstats', description='Grabs fish stats of a user for the current season',
options=[
    create_option(
        name='username',
        description='Enter username here',
        option_type=3,
        required=True
    )
]
)
async def fishstats(ctx, *, username:str):

    currentSeason = 19

    print('\nSomeone did the stats command lol\n')
    if username is None:
        return await ctx.send("Please add a Username.")
    headerslmao = {'Authorization': 'ENTER API KEY'}
    response = requests.get(f'https://fortnite-api.com/v1/stats/br/v2?name={username}', headers=headerslmao)
    
    if response.json()['status'] != 200:
        return await ctx.send('Could not find account!')
        
    accountid = response.json()['data']['account']['id']

    fishapi = requests.get(f'https://fortniteapi.io/v1/stats/fish?accountId={accountid}', headers = headers)

    if str(fishapi.json()['stats']) == '[]':
        return ctx.send(f"**{username}** hasn't caught any fisheys this Season. 🎣")

    allfishes = requests.get('https://fortniteapi.io/v1/loot/fish?lang=en', headers=headers)
    

    for i in fishapi.json()['stats']:
        if i['season'] == currentSeason:
            fishstats = i['fish']
    
    try:
        await ctx.send(f'**{username}** has caught **{len(fishstats)}/{len(allfishes.json()["fish"])}** fisheys in Chapter 3, Season 1! 🎣')
    except:
        await ctx.send(f"**{username}** hasn't caught any fisheys this Season. 🎣")


@slash.slash(name='fishsearch', description='Can search for a fish of your choice and grab stats for it',
options=[
    create_option(
        name='fish',
        description='Enter fish here',
        option_type=3,
        required=True
    )
]
)

async def fishsearch(ctx, *, fish:str):
    print('\nSomeone did the search command lol\n')
    async with aiohttp.ClientSession() as ses:
        req = await ses.get('https://fortniteapi.io/v1/loot/fish?lang=en', headers=headers)
        data = (await req.json())
    for i in data['fish']:
        if i['name'].lower() == fish.lower():
            embed = discord.Embed(color=discord.Colour.blue(), title=i['name'], description=f"```txt\nDescription: {i['description']}\nFishingspot: {i['details']}\nRarity: {i['rarity']}\nStacksize: {i['maxStackSize']}``` ")
            embed.set_thumbnail(url=i['image'])
            embed.set_footer(text=f'{random.choice(mylist)}')
            return await ctx.send(embed=embed)
    await ctx.send("Fish not found")



@slash.slash(name='sections', description='Get current/upcoming shop sections')
async def sections(ctx):
    print('Someone did the shop sections command lol')
    response = requests.get('https://fn-api.com/api/shop/sections')

    ss = response.json()['data']['sections']

    sections = ""
    quantity = ""

    for i in ss:
        #print(f'{i["sectionName"]} - (x{i["quantity"]})\n')
        quantity += f'{i["quantity"]}'
        quantity2 = i["quantity"]
        if quantity2>1:
            sections += f'- {i["name"]} ({i["quantity"]}x)\n'
        else:
            sections += f'- {i["name"]}\n'

    embed = discord.Embed(color=discord.Colour.blue(), title='Tonights upcoming Shop Sections:', description=f'{sections}')
    embed.set_footer(text=f'{random.choice(mylist)}')

    return await ctx.send(embed=embed)


@slash.slash(name='news', description='Can grab the current BR News.')
async def news(ctx):
    print('Someone did the news command lol')

    response = requests.get('https://fortnite-api.com/v2/news/br')

    bruh = response.json()['data']['motds']
    feed = ""
    for feedtext in bruh:
        feed2 = feedtext['title']
        feed += f"• {feed2}\n"
    image = response.json()['data']['image']
    embed = discord.Embed(color=discord.Colour.blue(), title='CURRENT BR NEWS', description=f"```txt\n{feed}```")
    embed.set_image(url=image)
    embed.set_footer(text=f'{random.choice(mylist)}')
    return await ctx.send(embed=embed)



@slash.slash(name='search', description='Can let you search for any item',options=[
    create_option(
        name='cosmetic',
        description='Enter cosmetic name here',
        option_type=3,
        required=True
    ),
    create_option(
        name='image',
        description='Would you like to generate an image for the item?',
        option_type=3,
        required=False,
        choices=[
            create_choice(
                name='yes',
                value='yes'
            )
        ]
    ),
    create_option(
        name='data',
        description='Would you like to show extended data for this item?',
        option_type=3,
        required=False,
        choices=[
            create_choice(
                name='yes',
                value='yes'
            )
        ]
    )
]
)
async def search(ctx, *, cosmetic:str, image:str=None, data:str=None):
    iconType = 'new'
    watermark = 'Generated by FishBot'
    imageFont = 'BurbankBigCondensed-Black.otf'
    placeholderUrl = 'https://i.ibb.co/svXhCgN/ph.png'

    response = requests.get(f'https://fortnite-api.com/v2/cosmetics/br/search?name={cosmetic}')

    if response.json()['status'] == 404:
        embed = discord.Embed(
            color = discord.Colour.red(),
            title='Error',
            description="Cosmetic not found. Make sure you're typing the name correctly!"
        )
        return await ctx.send(embed=embed)

    i = response.json()['data']
    start = time.time()
    name = i['name']
    id = i['id']
    description = i['description']
    backendtype = i['type']['value']
    backendtype = backendtype.upper()

    #IMAGE SAVING#

    if image != None:
        if useFeaturedIfAvaliable == 'True':
            if i["images"]["featured"] != None:
                url = i["images"]["featured"]
            else:
                if i['images']['icon'] != None:
                    url = i['images']['icon']
                else:
                    url = 'https://i.ibb.co/KyvMydQ/do-Not-Delete.png'
        else:
            if i['images']['icon'] != None:
                    url = i['images']['icon']
            else:
                url = 'https://i.ibb.co/KyvMydQ/do-Not-Delete.png'
        try:
            r = requests.get(url)
        except:
            print('a')
        open(f'cache/{id}temp.png', 'wb').write(r.content)
        iconImg = Image.open(f'cache/{id}temp.png')
        iconImg.resize((512,512),PIL.Image.ANTIALIAS)


        rarity = i["rarity"]['value']
        rarity = rarity.lower()

        try:
            raritybackground = Image.open(f'rarities/cataba/{rarity}.png').resize((512, 512), Image.ANTIALIAS).convert("RGBA")
        except:
            raritybackground = Image.open(f'rarities/cataba/common.png').resize((512, 512), Image.ANTIALIAS).convert("RGBA")

        try:
            background = Image.open(f'rarities/cataba/{rarity}_background.png').resize((512, 512), Image.ANTIALIAS).convert("RGBA")
        except:
            background = Image.open(f'rarities/cataba/common_background.png').resize((512, 512), Image.ANTIALIAS).convert("RGBA")

        img=Image.new("RGB",(512,512))
        img.paste(raritybackground)
        try:
            overlay = Image.open(f'rarities/cataba/{rarity}_overlay.png').resize((512, 512), Image.ANTIALIAS).convert("RGBA")
        except:
            overlay = Image.open(f'rarities/cataba/common_overlay.png').resize((512, 512), Image.ANTIALIAS).convert("RGBA")
        img.paste(overlay, (0,0), overlay)
        iconImg= Image.open(f'cache/{id}temp.png').resize((512, 512), Image.ANTIALIAS).convert('RGBA')
        img.paste(iconImg, (0,0), iconImg)
        img.paste(background, (0,0), background)
        try:
            rarityoverlay = Image.open(f'rarities/cataba/{rarity}_rarity.png').resize((512, 512), Image.ANTIALIAS).convert("RGBA")
        except:
            rarityoverlay = Image.open(f'rarities/cataba/placeholder_rarity.png').resize((512, 512), Image.ANTIALIAS).convert("RGBA")
        img.paste(rarityoverlay, (0,0), rarityoverlay)
        img.save(f'cache/{id}.png')
        loadFont = 'fonts/BurbankBigRegular-BlackItalic.otf'
        font=ImageFont.truetype(loadFont,31)

        background = Image.open(f'cache/{id}.png')
        name=name.upper()
        draw=ImageDraw.Draw(background)
        draw.text((256,472),name,font=font,fill='white', anchor='ms') # Writes name

        description=description.upper()
        font=ImageFont.truetype(loadFont,10)
        draw=ImageDraw.Draw(background)
        draw.text((256,501),description,font=font,fill='white', anchor='ms') # Writes description

        font=ImageFont.truetype(loadFont,14)
        draw=ImageDraw.Draw(background)
        draw.text((6,495),backendtype,font=font,fill='white') # Writes backend type        

        background.save(f'icons/{id}.png')
        os.remove(f'cache/{id}temp.png')
        os.remove(f'cache/{id}.png')
        #IMAGE SAVING#

    name1 = i['name']
    itemid = i['id']
    itemname = i['name']
    itemdesc = i['description']
    itemrarity = i['rarity']['displayValue']
    type = i['type']['displayValue']
    tags = ''
    for x in i['gameplayTags']:
        tags += f"{x}\n"

    if data != None:
        embed = discord.Embed(color=discord.Colour.blue(), title=f'{name1}:', description=f'{itemname} {type}:\n\nID: **{itemid}**\n\nDescription of **{itemname}**: \n**{itemdesc}**')
    else:
        embed = discord.Embed(color=discord.Colour.blue(), title=f'{name1}:', description=f'{itemname} {type}:\n\nID: **{itemid}**\n\nDescription of **{itemname}**: \n**{itemdesc}**\n\nItem Rarity: **{itemrarity}**\n\nItem Shop Tags:\n```{tags}```')
    

    if image != None:
        file = discord.File(f"icons/{itemid}.png", filename="image.png")
        embed.set_image(url="attachment://image.png")
        
    embed.set_thumbnail(url=f'https://fortnite-api.com/images/cosmetics/br/{itemid}/icon.png')
    embed.set_footer(text=f'{random.choice(mylist)}')
    await ctx.send(embed=embed, file=file)



@slash.slash(name='newcosmetics', description='Grabs the newest leaked cosmetics!')
async def newcosmetics(ctx):
    print('\nSomeone did the new cosmetics command')
    response = requests.get('https://fortnite-api.com/v2/aes')
    version = response.json()['data']['build']
    version = version[19:24]
    embed = discord.Embed(color=discord.Colour.blue(), title=f'New Cosmetics for Version {version}')
    with open('localdata.json') as readingoldfile:
        res = json.load(readingoldfile)['latestleaks']
    embed.set_image(url=f'{res}')
    embed.set_footer(text=f'{random.choice(mylist)}')
    return await ctx.send(embed=embed)

@client.command()
async def fevers(ctx):
    await ctx.send('Fevers is cool')

@slash.slash(name='aes', description='Grabs the current main AES Key', options=[
    create_option(
        name='option',
        description='Please choose between the two options.',
        option_type=3,
        required=True,
        choices=[
            create_choice(
                name='All',
                value='All'
            ),
            create_choice(
                name='Main',
                value='Main'
            )
        ]
    )
])

async def aes(ctx, option:str):

    print('\nSomeone did the aes command lol')
    
    if 'Main' in option:
        response = requests.get('https://fortnite-api.com/v2/aes')
        version = response.json()['data']['build']
        version = version[19:24]
        response = requests.get('https://fortnite-api.com/v2/aes')
        json = response.json()['data']
        main = json['mainKey']

        embed = discord.Embed(color=discord.Colour.blue(), title=f'Current main AES Key for **v{version}0:**', description=f"```txt\n0x{main}```")
        embed.set_footer(text=f'{random.choice(mylist)}')
        return await ctx.send(embed=embed)
    
    if 'All' in option:
        response = requests.get('https://fortnite-api.com/v2/aes')
        version = response.json()['data']['build']
        version = version[19:24]
        response = requests.get('https://fortnite-api.com/v2/aes')
        json = response.json()['data']
        main = json['mainKey']
        dynamic = response.json()['data']['dynamicKeys']
    
        dynkey = ''
        for dynamickeys in dynamic:
            key = dynamickeys['key']
            pak = dynamickeys['pakFilename']

            if 'optional-WindowsClient' not in pak and '.ucas' not in pak:
                dynkey += (f'{pak}: \n*0x{key}*\n\n')
    
        embed = discord.Embed(color=discord.Colour.blue(), title=f'Current **Main** AES Key for v{version}0:', description=f'\n0x{main}\n\n**Dynamic Keys**:\n\n{dynkey}')
        embed.set_footer(text=f'{random.choice(mylist)}')
        try:
            return await ctx.send(embed=embed)
        except:
            return await ctx.send('Could not post AES keys due to the text being too big.\n\nTry again soon, or use the **f.aes** command to get the main aes.')

@slash.slash(name='invite', description='Sends an invite link for FishBotV2 to add to your server.')
async def invite(ctx):
    embed = discord.Embed(title='Invite me to your Server here!\n\nhttps://discord.com/api/oauth2/authorize?client_id=892855105261563945&permissions=8&scope=bot%20applications.commands')
    await ctx.send(embed=embed)

@slash.slash(name='newids', description='Grabs the new or leaked ids from the current Fortnite version')
async def newids(ctx):
    print('\nSomeone did the ids command lol')
    response = requests.get('https://fortnite-api.com/v2/aes')
    version = response.json()['data']['build']
    version = version[19:24]
    response = requests.get('https://fortnite-api.com/v2/cosmetics/br/new')
    data = response.json()['data']['items']
    ids = ''
    for itemids in data:
        single = itemids['id']
        ids += "• " + single + '\n'
    #print(ids)
    try:
        embed = discord.Embed(color=discord.Colour.blue(), title=f'Current new IDs for version **v{version}0.**', description=f"```{ids}```")
        return await ctx.send(embed=embed)
    except:
        return await ctx.send("Could not grab IDs due to string being too big. Please go to this link for the IDs:\n\nhttps://pastebin.com/raw/iyqwjBXB")

@slash.slash(name='ping', description='pong!')
async def ping(ctx):
    await ctx.send(f'My ping is {round(client.latency * 1000)}ms!')

@slash.slash(name='stats', description='Can grab the normal BR stats of a user.',
options=[
    create_option(
        name='username',
        description='Enter username here',
        option_type=3,
        required=True
    )
]
)
async def stats(ctx, *, username:str=None):
    await ctx.defer()
    from tabs.overall import overall
    from tabs.solos import solos
    from tabs.duos import duos
    from tabs.squads import squads
    from tabs.other import other
    with open('localdata.json') as readingoldfile:
        res = json.load(readingoldfile)['statsbg']
    r = requests.get(res)
    open(f'DO NOT DELETE/background.png', 'wb').write(r.content)

    foreground= Image.open('DO NOT DELETE/background.png').resize((1920, 1080), Image.ANTIALIAS)
    img=Image.open(f'DO NOT DELETE/overlay.png')
    foreground.paste(img, (0, 0), img)

    foreground.save('DO NOT DELETE/bgfinal.png')

    if username is None:
        embed = discord.Embed(
            color = discord.Colour.red(),
            title='Error',
            description="Username not found. Make sure you're typing the account name correctly!"
        )
        return await ctx.send(embed=embed)

    headerslmao = {'Authorization': '60bcad5e-fe7c-4734-92a9-986b81f99444'}
    response = requests.get(f'https://fortnite-api.com/v2/stats/br/v2?name={username}', headers=headerslmao)
    data = response.json()

    if data['status'] != 200:
        embed = discord.Embed(
            color = discord.Colour.red(),
            title='Error',
            description="Username not found. Make sure you're typing the account name correctly!"
        )
        return await ctx.send(embed=embed)

    start = time.time()

    background = Image.open(f'DO NOT DELETE/bgfinal.png')

    loadFont = 'DO NOT DELETE/BurbankBigCondensed-Black.otf'
    x = data['data']

    # Overall Code
    overall(data, loadFont, background, x)

    # Solos Code
    solos(data, loadFont, background, x)  

    # Duos Code
    try:
        duos(data, loadFont, background, x)
    except:
        pass

    # Squads Code
    try:
        squads(data, loadFont, background, x)
    except:
        pass

    other(data, loadFont, background, x)

    end = time.time()

    background.save(f'Stats.png')
    embed = discord.Embed(
        title = f'{username} Stats'
    )
    file = discord.File(f"Stats.png", filename="image.png")
    embed.set_image(url="attachment://image.png")
    embed.set_footer(text=f'generated image in {round(end - start, 4)} seconds')
    await ctx.send(embed=embed, file=file)

@slash.slash(name='pak', description='Grab cosmetics from ANY pak of your choice!',
options=[
    create_option(
        name='pak',
        description='Enter pak number here',
        option_type=3,
        required=True
    )
]
)
async def pak(ctx, *, pak:str=None):
    await ctx.defer()

    print(f'\nSomeone grabbed pak {pak}!')
    response = requests.get(f'https://fortnite-api.com/v2/cosmetics/br/search/all?dynamicPakId={pak}')
 
    if response.json()['status'] != 200:
        embed=discord.Embed(title="ERROR", description="An error had occured; pak not found or API error.", color=0xff0000)
        return await ctx.send(embed=embed)
        #time.sleep(2)
        #exit()

    names = ''
    for i in response.json()['data']:
        name = i['name']
        id = i['id']
        type = i['type']['displayValue']
        imageurl = i['images']['icon']
        names += f'- **[{name}]({imageurl})** ({type})\n*{id}*\n\n'

    embed = discord.Embed(
        title=f'Cosmetics in Pak {pak}',
        description = names
    )
    num = len(response.json()['data'])
    embed.set_footer(text=f'Found {num} items in pak {pak}.')
    await ctx.send(embed=embed)

    

@slash.slash(name='weaponid', description='Add a weapon ID and grab the stats of that weapon!',
options=[
    create_option(
        name='weapon',
        description='Enter weapon name here',
        option_type=3,
        required=True
    )
]
)
async def weaponid(ctx, *, weapon:str=None):
    print('\nSomeone did the weapons command lol')
    msg = await ctx.send('Please wait...')

    response = requests.get('https://fortniteapi.io/v1/loot/list?lang=en', headers=headers)
    weapons = response.json()["weapons"]

    if weapon is None:
        return await ctx.send("Please add a Weapon ID.")

    for i in weapons:
        if i['id'].lower() == weapon.lower():
            name = i['name']
            id = i['id']
            desc = i['description']
            rarity = i['rarity']


            url = i["images"]["background"]

            embed = discord.Embed(color=discord.Colour.blue(), title=f'{name} Weapon:', description=f'ID: **{id}**\n\nDescription: **{desc}**\n\nRarity: **{rarity}**')
            embed.set_image(url=f'{url}')
            embed.set_footer(text=f'{random.choice(mylist)}')
            
            await msg.delete()
            return await ctx.send(embed=embed)

@slash.slash(name='wids', description='Can find wids of any weapon to then use with the weaponid command!', options=[
    create_option(
        name='weapon',
        description='Enter weapon id here',
        option_type=3,
        required=True
    )
])
async def wids(ctx, *, weapon:str=None):
    print('\nSomeone did the wids command')
    if weapon is None:
        return await ctx.send('Please enter a weapon name.')

    response = requests.get('https://fortniteapi.io/v1/loot/list?lang=en', headers=headers)
    weapons = response.json()["weapons"]
    widlol = ''

    SendWIDS = 'False'
    for i in weapons:
        name = i['name']
        if weapon.lower() in name.lower():
            name = i['name']
            rarity1 = i['rarity']
            rarity = rarity1.title()
            id = i['id']
            widlol += f'• {id} - **{name}** (*{rarity}*)\n'

            SendWIDS += 'lmfaolmfao'
    
    if SendWIDS == 'False':

        embed=discord.Embed(title="ERROR", description="Could not find a valid WID or AGID for this item.", color=0xff0000)
        return await ctx.send(embed=embed)

    try:
        embed = discord.Embed(color=discord.Colour.blue(), title=f'All WIDs for "{weapon.title()}":', description=f'{widlol}')
    except:
        embed=discord.Embed(title="ERROR", description="WID list is too big. Sending list anyway.", color=0xff0000)
        await ctx.send(embed=embed)

        await (await aiofiles.open(f'wids.txt', mode='w+', encoding='utf8')).write(widlol)
        file = discord.File("wids.txt", filename="wids.txt")
        await ctx.send(f'Heres the list of WIDs for {weapon.title()}', file=file)
        
    embed.set_footer(text=f'{random.choice(mylist)}')
    return await ctx.send(embed=embed)

@slash.slash(name='map', description='View the current (or past) Fortnite map', options=[
    create_option(
        name='version',
        description='custom map version (put as ? for a list)',
        option_type=3,
        required=False
    )
])
async def map(ctx, *, version:str=None):
    print('\nSomeone did the map command lol')
    if version == None:
        response = requests.get('https://fortnite-api.com/v1/map')
        map = response.json()['data']['images']['blank']

        response = requests.get('https://fortnite-api.com/v2/aes')
        version = response.json()['data']['build']
        version = version[19:24]

        embed = discord.Embed(color=discord.Colour.blue(), title=f'Battle Royale Map for verison {version}', description=f'')
        embed.set_image(url=f'https://media.fortniteapi.io/images/map.png')
        embed.set_footer(text=f'{random.choice(mylist)}')
        return await ctx.send(embed=embed)
    
    if version != None:
        response = requests.get('https://fortniteapi.io/v1/maps/list', headers=headers)
        if version == '?':
            textfile = ''
            for i in response.json()['maps']:
                version = i['patchVersion']
                textfile += f'{version}\n'
                
            await (await aiofiles.open(f'mapversions.txt', mode='w+', encoding='utf8')).write(textfile)
            file = discord.File("mapversions.txt", filename="mapversions.txt")
            return await ctx.send('Here are all of the versions to use with the Map Command.', file=file)

    
        x = response.json()['maps']
        for i in x:
            patchVersion = i['patchVersion']
            if version == patchVersion:
                image = i['url']
                try:
                    image = i['urlPOI']
                    if image != None:
                        pass
                    else:
                        image = i['url']
                except:
                    pass
                embed = discord.Embed(color=discord.Colour.blue(), title=f'Fortnite Map | Version = v{patchVersion}', description=f'')
                embed.set_image(url=f'{image}')
                embed.set_footer(text=f'{random.choice(mylist)}')
                return await ctx.send(embed=embed)
            else:
                i = 1

        if i == 1:
            msg = await ctx.send('Invalid verison, try again.')
        else:
            pass

@slash.slash(name='progressbar', description='sends an image of of the current Fortnite Season progress')
async def progressbar(ctx):
    print('\nSomeone did the progress bar command lol')
    response = requests.get(f'https://pastebin.com/raw/E9bbbS5R')

    start_day = response.json()["start_day"]
    start_month = response.json()["start_month"]
    start_year = response.json()["start_year"]
    end_day = response.json()["end_day"]
    end_month = response.json()["end_month"]
    end_year = response.json()["end_year"]
    season_number = response.json()["season_number"]
    import datetime
    time_start = datetime.datetime(start_year, start_month, start_day)
    time_now = datetime.datetime.now()
    time_end = datetime.datetime(end_year, end_month, end_day)
    days_left = time_end - time_now
    days_left = days_left.days
    days_left = days_left + 1
    days_full = time_end - time_start
    days_full = days_full.days
    days_in = time_now - time_start
    days_in = days_in.days
    percent1 = (days_in / days_full)*100
    percent = round(percent1)
    percentage = str(percent)
    percentage = percentage+'%'
    with Image.open(f'pbg.png') as img:
        progress_bar_amount = 43 + (percent*11.11)
        img1 = ImageDraw.Draw(img)
        middlepercentage = 'True'
        bar_color = '#8a00a6'
        img1.rectangle([(progress_bar_amount, 255), (42, 109)], fill = bar_color)
        if middlepercentage == 'True':
            #print('Generating middle percentage...')
            imageFont = 'BurbankBigCondensed-Black.otf'
            loadFont = 'fonts/'+imageFont
            stroke_color = (0, 0, 0)
            font=ImageFont.truetype(loadFont,100)
            w,h=font.getsize(percentage)
            draw=ImageDraw.Draw(img)
            w1, h1 = draw.textsize(percentage, font=font)
            draw.text(((670-w1)/1,140),percentage,font=font,fill='white',stroke_width=4, stroke_fill=stroke_color)
        else:
            pass
        #print('Added bar and created image')
        img.save(f'progressbar.png')


    embed = discord.Embed(title=f'{season_number} Progress', 
    description=f'- {percent}% Completed\n- {days_left} Days left')

    file = discord.File("progressbar.png", filename="image.png")
    embed.set_image(url="attachment://image.png")
    embed.set_footer(text=f'{random.choice(mylist)}')
    await ctx.send(embed=embed, file=file)

@slash.slash(name='featuredislands', description='view all creative featured islands')
async def featuredislands(ctx):
    await ctx.defer()
    print('\nSomeone did the featured islands command')      
    response = requests.get('https://fortniteapi.io/v1/creative/featured', headers=headers)
    x = response.json()['featured']

    merged = ''
    try:
        shutil.rmtree('cnews')
        os.makedirs('cnews')
    except:
        os.makedirs('cnews')
    
    embed = discord.Embed(
    color=discord.Colour.blue(), 
    title=f'Current Creative Featured Islands:', 
    description=f'{merged}'
    )

    for i in x:
        name = i['title']
        code = i['code']
        imageurl = i['image']
        r = requests.get(imageurl, allow_redirects=True)
        #print('Saved image')

        embed.add_field(
            name=f'{code}',
            value=f'[{name}]({imageurl})'
        )

    embed.set_footer(text=f'{random.choice(mylist)}')
    return await ctx.send(embed=embed)

#async def sac(ctx):
#    await ctx.send('Support our bot by using code **CEPTNITE10** in the Fortnite Item Shop!\n\nAll purchaces from our code will go straight to helping us make FishBot the *BEST* Fortnite Discord Bot!')
#    return await ctx.send(file=discord.File('sac.gif'))

@client.command()
async def dababy(ctx):
    await ctx.send('YEAH YEAH ❗ ❗ ❗ ❗ ❗')
    return await ctx.send(file=discord.File('cover4.jpg'))

@slash.slash(name='vote' ,description='vote for me pls')
async def vote(ctx):
    return await ctx.send('Vote for me on top.gg!\n\nhttps://top.gg/bot/892855105261563945')

@slash.slash(name='blogposts', description='Grabs the most recent Fortnite blog post')
async def blogposts(ctx):
    print('\nsomeone did da blogposts command')

    response = requests.get('https://fn-api.com/api/blogposts')
    data = response.json()['data']['fortnite']['posts'][0]

    embed = discord.Embed(color=discord.Colour.blue(), title=f"**{data['title']}**", description=f"{data['url']}")
    embed.set_image(url=f"{data['images']['image']}")
    embed.set_footer(text=f'{random.choice(mylist)}')
    embed.set_author(name=f"{data['author']}", icon_url='https://pbs.twimg.com/profile_images/1371468883136286727/5TuH8hHa_400x400.jpg')

    return await ctx.send(embed=embed)

@slash.slash(name='notices', description='Grabs the current Fortnite notices')
async def notices(ctx):
    print('\nSomeone did the notices command lol')
    response = requests.get('https://fortnitecontent-website-prod07.ol.epicgames.com/content/api/pages/fortnite-game')
    notices = response.json()['emergencynoticev2']['emergencynotices']['emergencynotices']
    if str(notices) == '[]':
        embed=discord.Embed(title="ERROR", description="There are currently no Fortnite notices.", color=0xff0000)
        return await ctx.send(embed=embed)

    noticesall = ''
    for i in notices:
        title = i['title']
        body = i['body']
        noticesall += f'**{title}**\n- {body}\n\n'
    
    embed = discord.Embed(color=discord.Color.red(), title=f'Current Fortnite Notices:', description=f'{noticesall}')
    embed.set_image(url='https://pbs.twimg.com/media/EySkkucWEAUh__w?format=jpg&name=small')
    embed.set_footer(text=f'{random.choice(mylist)}')
    embed.set_author(name='Fortnite Notices', icon_url='https://cdn.discordapp.com/attachments/826548349662134282/831256813697630289/alert_2.png')
    return await ctx.send(embed=embed)

@slash.slash(name='cid', description='Grabs character parts of any skin', options=[
    create_option(
        name='character',
        description='Enter skin name here',
        option_type=3,
        required=True
    )
]
)
async def cid(ctx, *, character: str=None):
    print('\nSomeone did the cp command')

    response = requests.get(f'https://fortnite-api.com/v2/cosmetics/br/search?name={character}&backendType=AthenaCharacter')
    if response:
        if response.json()['status'] != 200:
            return await ctx.send(response.json()['error'])
    name = response.json()['data']['name']
    url = response.json()['data']['images']['icon']
    id = response.json()['data']['id']
    tags = response.json()['data']['gameplayTags']

    allvariants = ''

    if response.json()['data']['variants'] != None:
        for i in response.json()['data']['variants'][0]['options']:
            allvariants += f'- {name}\n\n'
        
        #tag = i['tag']
        #name = i['name']

    response = requests.get(f'https://fortnitecentral.gmatrixgames.ga/api/v1/export?path={path}')
    try:
        cps = response.json()['jsonOutput'][0]['Properties']['BaseCharacterParts']
    except:
        return await ctx.send('There are no character parts availible for this item.')
    
    allpaths = ''
    for i in cps:
        path = i['AssetPathName']
        allpaths += f'{path}\n\n'
    if allvariants == '':
        embed = discord.Embed(color=discord.Colour.blue(), title=f'Character Parts for {name}', description=f'**CID:**\n{id}\n\n**Character Parts:**\n```{allpaths}```')
    else:
        embed = discord.Embed(color=discord.Colour.blue(), title=f'Character Parts for {name}', description=f'**CID:**\n{id}\n\n**Character Parts:**\n```{allpaths}```\n\n**Item Variants:**\n{allvariants}')
    embed.set_thumbnail(url=f'{url}')
    embed.set_footer(text=f'{random.choice(mylist)}')
    return await ctx.send(embed=embed)

@slash.slash(name='sac', description='Search for any working support-a-creator code', options=[
    create_option(
        name='sac',
        description='Enter code here',
        option_type=3,
        required=True
    )
]
)
async def sac(ctx, *, sac: str=None):
    if sac == None:
        return await ctx.send('Make sure to enter in a Support-A-Creator Code!')

    print('\nSomeone did the sac command lol')
    response = requests.get(f'https://fortnite-api.com/v2/creatorcode/search?name={sac}')

    if response.json()['status'] != 200:
        return await ctx.send('The requested code is either invalid or was not found!')

    data = response.json()['data']
    code = data['code']
    id = data['account']['id']
    name = data['account']['name']
    status = data['status']
    verify = data['verified']

    if verify is False:
        verify = 'False'
    else:
        verify = 'True'

    embed = discord.Embed(color=discord.Colour.blue(), title=f'Code {code} information:', description=f'**Owner Name:**\n{name}\n\n**Owner ID:**\n{id}\n\n**Code Status:**\n{status}\n\n**Verified?**\n{verify}')
    embed.set_footer(text=f'{random.choice(mylist)}')
    if 'intheshade' in sac:
        await ctx.send('good choice, code **intheshade** is a great code.')
    return await ctx.send(embed=embed)

@client.command()
async def dm(ctx, *, message):
    return await ctx.author.send(f'{message}')

@slash.slash(name='say', description='the bot will repeat what you say', options=[
    create_option(
        name='message',
        description='Enter text here',
        option_type=3,
        required=True
    )
]
)
async def say(ctx, *, message):
    print(f'\nUser echoed {message}')
    if '@everyone' in message:
        return await ctx.send('sike u thought lmao')
    elif '@here' in message:
        return await ctx.send('sike u thought lmao')
    elif '@' in message:
        return await ctx.send('You can not @ people in messages... sorry :/')
    else:
        return await ctx.send(message)

@slash.slash(name='animals', description='generate current Fortnite animals')
async def animals(ctx):
    with open('localdata.json') as readingoldfile:
        res = json.load(readingoldfile)['currentanimals']
    embed = discord.Embed(color= discord.Colour.green(), title=f'Current Animals in Fortnite Battle Royale')
    embed.set_footer(text=f'{random.choice(mylist)}')
    embed.set_image(url=res)
    await ctx.send(embed=embed)

def check_if_it_is_me(ctx):
    #authorID = ctx.message.author.id
    #list_ = [776811214893875211, 725087455971377173, 262324705254572032, 616074414982692865, 734344338573885510, 903062157695021118, 835963773717970964]
    #return_service = any(list_ in authorID for list_ in list_)
    #if return_service == True:
    #    return
    return ctx.message.author.id == 776811214893875211 or ctx.message.author.id == 725087455971377173 or ctx.message.author.id == 262324705254572032 or ctx.message.author.id == 616074414982692865 or ctx.message.author.id == 734344338573885510 or ctx.message.author.id == 903062157695021118 or ctx.message.author.id == 835963773717970964 or ctx.message.author.id == 592448563397656660 or ctx.message.author.id == 490051707791998976
    # Fevers, ral, stormzy, nickname, ender, jacobb, deviantionsz

@client.command()
@commands.check(check_if_it_is_me)
async def dmuser(ctx, user: discord.User, *, value):
    clientname = f'{ctx.author.display_name}'

    current_time = time.strftime("%I:%M %p")
    await user.send(f"You have a incoming message from **{clientname}**!\n\n*{value}*\n\nSent at {current_time}")
    await ctx.send('Sent message!')

@dmuser.error
async def dmusererror(ctx, error):
    if isinstance(error, discord.ext.commands.errors.MissingRequiredArgument):
        await ctx.send('Missing user argument!')
    elif isinstance(error, discord.ext.commands.errors.CheckFailure):
        await ctx.send('You are not on the cool kid list! Ask Fevers#3474 to be on the list.')
    else:
        print('hmm')

@slash.slash(name='shophistory', description='Grab shop information for a cosmetic', options=[
    create_option(
        name='item',
        description='Enter item here',
        option_type=3,
        required=True
    )
])
async def shophistory(ctx, *, item:str=None):
    if item == None:
        return await ctx.send('Please add a cosmetic name.')

    response = requests.get(f'https://fortnite-api.com/v2/cosmetics/br/search?name={item}')

    try:
        d = response.json()['data']
    except:
        return await ctx.send('Item was not found / An error has occured.')

    if d['shopHistory'] == None:
        return await ctx.send('No Shop History was found for this item.')

    item = item.title()
    embed = discord.Embed(
        color = discord.Colour.green(),
        title = f'Shop History for **{item}**'
    )

    all = ''
    for i in d['shopHistory']:
        i = i.replace('T00:00:00Z', '').replace('T14:00:00Z', '')
        all += f' - {i}\n'

    embed.add_field(
        name='Shop History',
        value=f'{all}'
    )

    num = len(d['shopHistory'])

    embed.add_field(
        inline=True,
        name='Occurrences',
        value=f'  ***{str(num)}***'
    )
    embed.set_footer(text=f'{random.choice(mylist)}')
    
    try:
        url = d['images']['icon']
    except:
        url = False

    if url == None:
        url = False

    if url != False:
        embed.set_thumbnail(url = url)
    await ctx.send(embed=embed)

@slash.slash(name='challenges', description='Generates a list of challenges for a bundle', options=[
    create_option(
        name='option',
        description='Please enter a challenge bundle ID or Name.',
        option_type=3,
        required=True,
        choices=[
            create_choice(
                name='ID',
                value='ID'
            ),
            create_choice(
                name='Name',
                value='Name'
            )
        ]
    ),
    create_option(
        name='bundle',
        description='Please enter a challenge bundle ID or Name.',
        option_type=3,
        required=True
    )
])
async def challenges(ctx, *, option:str=None, bundle:str):
    print('Someone did the challenges command')

    type = option.lower()

    response = requests.get('https://fortniteapi.io/v2/challenges?season=current&lang=en', headers=headers)

    rewards = 'false'

    global disimage
    disimage = ''
    id = bundle.lower()
    for i in response.json()['bundles']:
        if 'id' in type:
            if i['id'].lower() == id:
                embed = discord.Embed(
                    color = discord.Colour.green(),
                    title = f"{i['name']}"
                )

                for x in i['quests']:
                    name = x['name']
                    if name == '':
                        name = 'N/A'
                    xp = x['reward']['xp']
                    xp = str(xp)

                    embed.add_field(
                        name=f'{name}',
                        value = f'- {xp} XP'
                    )

                try:
                    #print('found rewards')
                    rewarde = discord.Embed(
                        color = discord.Colour.magenta(),
                        title=f'Bundle Rewards'
                    )
                    for i in i['bundleRewards']:
                        name = i['name']
                        id = i['id']
                        type = i['type']['name']
                        iurl = i['images']['icon']
                        if iurl == None:
                            iurl = 'https://trackercdn.com/legacycdn/fortnite/06645706_large.png'

                        rewarde.add_field(
                            name=f'Type: {type}',
                            value=f'Name/Icon: [{name}]({iurl})'
                        )

                    if len(i['bundleRewards']) == 0:
                        rewards = 'false'
                    else:
                        rewards = 'true'
                except:
                    return await ctx.send('An error has occured.')
                
                if i['images'] != None:
                    if i['images']['DisplayImage'] != None:
                        disimage = i['images']['DisplayImage']
                        
        elif 'name' in type:
            if i['name'].lower() == id:
                embed = discord.Embed(
                    color = discord.Colour.green(),
                    title = f"{i['name']}"
                )

                for x in i['quests']:
                    name = x['name']
                    if name == '':
                        name = 'N/A'
                    xp = x['reward']['xp']
                    xp = str(xp)

                    embed.add_field(
                        name=f'{name}',
                        value = f'- {xp} XP'
                    )

                try:
                    #print('found rewards')
                    rewarde = discord.Embed(
                        color = discord.Colour.magenta(),
                        title=f'Bundle Rewards'
                    )
                    for i in i['bundleRewards']:
                        name = i['name']
                        id = i['id']
                        type = i['type']['name']
                        iurl = i['images']['icon']
                        if iurl == None:
                            iurl = 'https://trackercdn.com/legacycdn/fortnite/06645706_large.png'

                        rewarde.add_field(
                            name=f'Type: {type}',
                            value=f'Name/Icon: [{name}]({iurl})'
                        )

                    if len(i['bundleRewards']) == 0:
                        rewards = 'false'
                    else:
                        rewards = 'true'

                except:
                    return await ctx.send('An error has occured.')

                if i['images'] != None:
                    if i['images']['DisplayImage'] != None:
                        disimage = i['images']['DisplayImage']

        else:
            print('wtf')
    try:
        embed.set_footer(text=f'{random.choice(mylist)}')
    except:
        return ctx.send('Challenge bundle does not exist/an error has occured.')

    if disimage == '':
        embed.set_thumbnail(url='https://static.wikia.nocookie.net/fortnite/images/5/57/Battle_Star_-_Icon_-_Fortnite.png/revision/latest/scale-to-width-down/220?cb=20210205172909')
    else:
        embed.set_thumbnail(url=disimage)

    if rewards == 'true':
        await ctx.send(embed=embed)
        await ctx.send(embed=rewarde)
    else:
        await ctx.send(embed=embed)

@slash.slash(name='shopinfo', description='See information on the current Item Shop!')
async def shopinfo(ctx):
    response = requests.get('https://fortnite-api.com/v2/shop/br/combined')
    s = response.json()['data']

    list = []
    from datetime import date
    from datetime import datetime

    today = date.today()
    currentdate = today.strftime("%Y-%m-%d")

    for i in s['featured']['entries']:
        for i in i['items']:
            shophistory = i['shopHistory']
            try:
                lastseen = shophistory[-2]
            except:
                lastseen = currentdate
            lastseen = lastseen[:10]
            dateloop = datetime.strptime(lastseen, "%Y-%m-%d")
            current = datetime.strptime(currentdate, "%Y-%m-%d")
            diff = current.date() - dateloop.date()
            daysd=int(diff.days)
            list.append(daysd)

    for i in s['daily']['entries']:
        for i in i['items']:
            shophistory = i['shopHistory']
            try:
                lastseen = shophistory[-2]
            except:
                lastseen = currentdate
            lastseen = lastseen[:10]
            dateloop = datetime.strptime(lastseen, "%Y-%m-%d")
            current = datetime.strptime(currentdate, "%Y-%m-%d")
            diff = current.date() - dateloop.date()
            daysd=int(diff.days)
            list.append(daysd)

    date = s['date']
    date = date[:10]

    featureditems = len(s['featured']['entries'])
    dailyitems = len(s['daily']['entries'])
    totalitems = featureditems+dailyitems
    
    embed = discord.Embed(
        title=f'Item Shop for {date}:'
    )

    embed.add_field(
        name='Total Shop Items',
        value=f'{totalitems}'
    )

    embed.add_field(
        name='Featured Items',
        value=f'{featureditems}'
    )

    embed.add_field(
        name='Daily Items',
        value=f'{dailyitems}'
    )

    list.sort(reverse = True)
    maxitem = list[0]
    embed.add_field(
        name='Max Last Seen',
        value=f'{maxitem} days'
    )

    list.sort()
    minitem = list[0]
    embed.add_field(
        name='Min Last Seen',
        value=f'{minitem} days'
    )

    average = sum(list) / len(list)
    average = round(average, 0)
    embed.add_field(
        name='Average of Last Seen items',
        value = f'{average} days'
    )

    embed.set_thumbnail(url='https://i.ibb.co/6mXdbvP/IMG-9028.png')
    embed.set_footer(text=f'{random.choice(mylist)}')
    await ctx.send(embed=embed)

@slash.slash(name='help', description='Get help & details with this bot.')
async def help(ctx):
    embed = discord.Embed(
        color = 0x36393F,
        title="Hey, I'm FishBot!",
        description='All my commands use Discord slash commands. Start your message with a "/" to see all my commands.'
    )

    embed.add_field(name='Feedback',value='Let me know what you think about FishBot on [Discord](https://dsc.gg/FishBot)!')
    embed.add_field(name='Help & Support', value='[Invite FishBot](https://discord.com/api/oauth2/authorize?client_id=892855105261563945&permissions=8&scope=bot%20applications.commands)\n[Support Server](https://dsc.gg/FishBot)', inline=False)
    embed.add_field(name='Commands', value='View all of the FishBot commands [here](https://sites.google.com/view/feversdev/fishbot)')
    await ctx.send(embed=embed)

@slash.slash(name='info', description='Gives information on this Discord bot')
async def info(ctx):
    embed = discord.Embed(
        color = 0x36393F,
        title="Hey, I'm FishBot!",
        description="I am a  easy-to-use Fortnite Discord bot with 30+ commands that you can add to your discord server to interact with your Fortnite-based community."
    )

    embed.add_field(name='Running',value='I am currently running on **Python 3.7.5**')
    embed.add_field(name='Servers', value=f"I am currently in **{len(client.guilds)}** servers")
    embed.add_field(name='Commands', value='View all of the FishBot commands [here](https://sites.google.com/view/feversdev/fishbot)')
    embed.add_field(name="Server", value="I am currently running on a Virtual Private Server (VPS) opperated by [GalaxyGate](https://www.galaxygate.net/).")
    embed.add_field(name="Server Location", value="My server location is currently running in **New York, USA**")
    embed.add_field(name="Ping", value=f"My ping is currently {round(client.latency * 1000)}ms")
    await ctx.send(embed=embed)

# Admin Commands
TestingID = [889604705590853643]
@slash.slash(guild_ids=TestingID, name='changedata', description='Admin only command',options=[create_option
    (
        name='option',
        description='What do you want to edit?',
        option_type=3,
        required=True,
        choices=[
            create_choice(
                name='NewCosmeticsUrl',
                value='NewCosmeticsUrl'
            ),
            create_choice(
                name='AnimalsUrl',
                value='AnimalsUrl'
            ),
            create_choice(
                name='NPCsUrl',
                value='NPCsUrl'
            ),
            create_choice(
                name='StatsBG',
                value='StatsBG'
            )
        ]
    ),
    create_option(
        name='url',
        description='Enter URL here',
        option_type=3,
        required=True
    ),
])
async def changedata(ctx, option:str, url:str):
    a_file = open(f"localdata.json", "r")
    json_object = json.load(a_file)
    a_file.close()

    if option == 'NewCosmeticsUrl':
        old = json_object['latestleaks']
        json_object['latestleaks'] = url
        new = json_object['latestleaks']
    elif option == 'AnimalsUrl':
        old = json_object['currentanimals']
        json_object['currentanimals'] = url
        new = json_object['currentanimals']
    elif option == 'NPCsUrl':
        old = json_object['npcs']
        json_object['npcs'] = url
        new = json_object['npcs']
    elif option == 'StatsBG':
        old = json_object['statsbg']
        json_object['statsbg'] = url
        new = json_object['statsbg']


    a_file = open(f"localdata.json", "w")
    json.dump(json_object, a_file, indent = 4)
    print('dumped json into file')

    await ctx.send(f'Updated local data for *{option}*\n\nOLD:  *{old}*\nNEW:  **{new}**')

@slash.slash(name='battlepass', description='Gives information about the current/chosen Battle Pass season', options=[
    create_option(
        name='season',
        description='seasonNum',
        option_type=3,
        required=False
    )
])
async def battlepass(ctx, season:str = None):
    response = requests.get('https://fortniteapi.io/v1/seasons/list?lang=en', headers=headers)

    if season != None:
        for i in response.json()['seasons']:
            if i['season'] == int(season):
                seasonDisplay = i['displayName']
                embed = discord.Embed(
                    color = 0x36393F,
                    title = f'{seasonDisplay}'
                    )
                embed.set_thumbnail(url='https://static.wikia.nocookie.net/fortnite/images/5/57/Battle_Star_-_Icon_-_Fortnite.png/revision/latest')

                embed.add_field(name='Season Start', value=i['startDate'][:10])
                embed.add_field(name='Season End', value=i['endDate'][:10])

                total_updates = len(i['patchList'])
                embed.add_field(name='Total Updates', value=f'{total_updates}')

                all_updates = ''
                for x in i['patchList']:
                    version = x['version']
                    all_updates += f'{version}\n'

                embed.add_field(name='All Updates', value=all_updates)

                return await ctx.send(embed=embed)
    
    else:
        for i in response.json()['seasons']:
            if i['season'] == currentSeasonNum:
                seasonDisplay = i['displayName']
                embed = discord.Embed(
                    color = 0x36393F,
                    title = f'{seasonDisplay}'
                    )
                embed.set_thumbnail(url='https://static.wikia.nocookie.net/fortnite/images/5/57/Battle_Star_-_Icon_-_Fortnite.png/revision/latest')

                embed.add_field(name='Season Start', value=i['startDate'][:10])
                embed.add_field(name='Season End', value=i['endDate'][:10])

                total_updates = len(i['patchList'])
                embed.add_field(name='Total Updates', value=f'{total_updates}')

                all_updates = ''
                for x in i['patchList']:
                    version = x['version']
                    all_updates += f'{version}\n'

                embed.add_field(name='All Updates', value=all_updates)

                return await ctx.send(embed=embed)

@slash.slash(name='shop', description='Responds with the current Fortnite Item Shop as a Discord embed.')
async def shop(ctx):

    sectionjson = 'name'

    response = requests.get('https://fortnite-api.com/v2/shop/br/combined')
    current_date = response.json()['data']['date'][:10]
    await ctx.send(f'Heres the shop for {current_date}! (type /shopinfo for more info)\n*please note that you have a limited amount of time to use this embed before it closes.*\n\nIf you do not understand how this works, please do /howtouse shop')

    sections_list = []
    result = []

    for i in response.json()['data']['featured']['entries']:
        sectionID = i['section'][sectionjson]
        sections_list.append(sectionID)
        for i in sections_list: 
            if i not in result: 
                result.append(sectionID) 

    for i in response.json()['data']['daily']['entries']:
        sectionID = i['section'][sectionjson]
        sections_list.append(sectionID)
        for i in sections_list: 
            if i not in result: 
                result.append(sectionID) 

    print(f'Someone ran the shop command. There are {len(result)} sections in this shop.')

    from disputils import BotEmbedPaginator, BotConfirmation, BotMultipleChoice
    
    number = 0
    embed = []
    
    for i in result:
        section_count = sections_list.count(i)
        number = number + 1
        currentEmbed = discord.Embed(
            title = f'Page {number} - {i}',
            description=f'**{section_count}** Items are in the *{i}* section.'
        )
        currentEmbed.set_author(name=f'FishBotV2 - {current_date} Shop')

        for x in response.json()['data']['featured']['entries']:
            if x['section'][sectionjson] == i:
                itemname = f"{x['items'][0]['name']} {x['items'][0]['type']['displayValue']}"

                # IF ITEM BUNDLE, REPLACE NAME HERE
                try:
                    itemname = f"{x['bundle']['name']} *{x['bundle']['info']}*"
                except:
                    pass
                ####

                price = x['finalPrice']
                currentEmbed.add_field(
                    name=f'{itemname}',
                    value=f'Price: {price} V-Bucks'
                )

        for x in response.json()['data']['daily']['entries']:
            if x['section'][sectionjson] == i:
                itemname = f"{x['items'][0]['name']} {x['items'][0]['type']['displayValue']}"
                try:
                    itemname = f"{x['bundle']['name']}\n*{x['bundle']['info']}*"
                except:
                    pass
                price = x['finalPrice']
                currentEmbed.add_field(
                    name=f'{itemname}',
                    value=f'Price: {price} V-Bucks'
                )
        
        currentEmbed.set_thumbnail(url='https://i.ibb.co/VwBbn2K/IMG-0754.png')
        embed.append(currentEmbed)


    paginator = BotEmbedPaginator(ctx, embed)
    
    #await ctx.send(f'Hey there {ctx.message.author.mention}, here ya go!')
    await paginator.run()

@slash.slash(name='howtouseshop', description='Gives information on how to use the shop command.')
async def howtouseshop(ctx):
    embed = discord.Embed(
        color = discord.Colour.blue(),
        title='How to use the shop command reacitons:',
        description='*please note that you have a limited amount of time to use this embed before it closes.* This is the case so our bot is not overloaded with API requests and embeds.'
    )
    embed.set_image(url='https://i.ibb.co/61ZT1yb/image.png')
    embed.set_footer(text=f'{random.choice(mylist)}')

    await ctx.send(embed=embed)



# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
# HIDDEN TO NOT SHOW TOKEN
client.run('ODkyODU1MTA1MjYxNTYzOTQ1.YVS-HQ.p6uXgHguNIDEbTuKYwPWrTYgwyk')